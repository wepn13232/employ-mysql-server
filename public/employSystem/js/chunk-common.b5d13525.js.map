{"version":3,"sources":["webpack:///./src/store/index.js","webpack:///./src/utils/apiUtil.js","webpack:///./src/utils/utils.js"],"names":["Vue","use","Vuex","store","Store","state","Authorization","localStorage","getItem","representFlag","breadcrumbName","userFlag","attachFlag","mutations","changeLogin","user","setItem","changeReprensentStatus","falg","changeBreadcrumbName","name","changeUserStatus","changeAttachStatus","getters","getRepresentFlag","getBreadcrumbName","getUserFlag","getAttachFlag","server","api","request","placeholder","i","url","indexOf","replace","Promise","resolve","reject","timeOut","setTimeout","console","error","type","axios","method","params","headers","then","response","clearTimeout","data","catch","formData","formdata","FormData","append","crypto","require","aesEncrypt","key","cipher","createCipher","crypted","update","final","isPhone","rule","value","callback","reg","test","Error","isNum","age"],"mappings":"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","file":"js/chunk-common.b5d13525.js","sourcesContent":["import Vue from 'vue';\r\nimport Vuex from 'vuex';\r\nVue.use(Vuex);\r\n\r\nconst store = new Vuex.Store({\r\n\r\n  state: {\r\n    // 存储token\r\n    Authorization: localStorage.getItem('Authorization') ? localStorage.getItem('Authorization') : '',\r\n    //存储就业信息\r\n    representFlag: \"false\",\r\n    //面包屑\r\n    breadcrumbName:\"\",\r\n    userFlag: \"false\",\r\n    attachFlag:\"false\"\r\n  },\r\n\r\n  mutations: {\r\n    // 修改token，并将token存入localStorage\r\n    changeLogin(state, user) {\r\n      state.Authorization = user.Authorization;\r\n      localStorage.setItem('Authorization', user.Authorization);\r\n    },\r\n    //修改存储的就业代表弹框标识\r\n    changeReprensentStatus(state, falg) {\r\n      state.representFlag = falg;\r\n      // console.log(\"representFlag\" + state.representFlag)\r\n    },\r\n    //修改面包屑\r\n    changeBreadcrumbName(state, name){\r\n      state.breadcrumbName = name;\r\n    },\r\n    //修改用户新弹框标识-管理员\r\n    changeUserStatus(state, falg) {\r\n      state.userFlag = falg;\r\n    },\r\n    //修改用户新弹框标识-管理员\r\n    changeAttachStatus(state, falg) {\r\n      state.attachFlag = falg;\r\n    },\r\n  },\r\n  getters: {\r\n\r\n    //get方法\r\n    getRepresentFlag: state => state.representFlag,\r\n    getBreadcrumbName: state => state.breadcrumbName,\r\n    getUserFlag: state => state.userFlag,\r\n    getAttachFlag: state => state.attachFlag,\r\n\r\n  },\r\n});\r\n\r\nexport default store;","import axios from 'axios';\r\nimport CryptoJS from 'crypto-js/crypto-js'\r\n/** \r\n * @method restful请求封装\r\n * @param api\r\n * @param {string} api.url 后台地址\r\n * @param {string} api.type 请求方式 get post put delete\r\n * @param {boolean} api.placeholder 是否启用占位符替换 true启用 false不启用 启用后会自动匹配url上的占位符与入参进行替换\r\n * @param {boolean} api.formData 是否启用formData数据格式如参 true启用 false不启用 启用后会自动将入参格式转为formData格式，仅在post请求有效\r\n * @param {object}request 请求参数 默认为空对象\r\n */\r\n\r\nexport function server(api, request = {}) {\r\n    /** \r\n     * 此处可进行请求前的数据处理：未登录，权限校验等\r\n     */\r\n    // 替换占位符\r\n    if (api.placeholder) {\r\n        for (var i in request) {\r\n            if (api.url.indexOf(`{${i}}`) != -1) {\r\n                api.url = api.url.replace(`{${i}}`, `${request[i]}`);\r\n                delete request[i]\r\n            }\r\n        }\r\n    }\r\n    // 创建一个promise并返回\r\n    return new Promise((resolve, reject) => {\r\n        // 设置请求超时定时器-此处我设置的150000毫秒\r\n        let timeOut = setTimeout(() => {\r\n            console.error('timeout：', '请求超时');\r\n            reject('请求超时')\r\n        }, 15000)\r\n        // get请求\r\n        if (api.type == \"get\") {\r\n            // 返回一个axios请求\r\n            return axios({\r\n                    // 传入请求地址\r\n                    url: api.url,\r\n                    // 设置请求方式\r\n                    method: 'get',\r\n                    // 设置url携带参数\r\n                    params: {\r\n                        ...request\r\n                    },\r\n                    // 设置请求头\r\n                    headers: {\r\n                        'Content-Type': 'application/json;charset=utf-8'\r\n                    },\r\n                })\r\n                .then(function (response) {\r\n                    // 请求成功清除定时器\r\n                    clearTimeout(timeOut);\r\n                    // 执行resolve\r\n                    resolve(response.data);\r\n                })\r\n                .catch(function (error) {\r\n                    // 执行reject\r\n                    reject(error);\r\n                    // 控制台打印错误信息\r\n                    console.error('error：', error);\r\n                });\r\n        } else\r\n            // post请求\r\n            if (api.type == \"post\") {\r\n                // 转换数据格式为formData格式\r\n                if (api.formData && api.type == \"post\") {\r\n                    const formdata = new FormData();\r\n                    for (let i in request) {\r\n                        formdata.append(i, request[i])\r\n                    }\r\n                    request = formdata;\r\n                }\r\n                // 返回一个axios请求\r\n                return axios({\r\n                        // 传入请求地址\r\n                        url: api.url,\r\n                        // 设置请求方式\r\n                        method: 'post',\r\n                        // 设置body携带参数\r\n                        data: request,\r\n                        // 设置请求头\r\n                        headers: {\r\n                            'Content-Type': 'application/json;charset=utf-8'\r\n                        },\r\n                    })\r\n                    .then(function (response) {\r\n                        // 请求成功清除定时器\r\n                        clearTimeout(timeOut);\r\n                        // 执行resolve\r\n                        resolve(response.data);\r\n                    })\r\n                    .catch(function (error) {\r\n                        // 执行reject\r\n                        reject(error);\r\n                        // 控制台打印错误信息\r\n                        console.error('error：', error);\r\n                    });\r\n            } else\r\n                // put请求\r\n                if (api.type == \"put\") {\r\n                    // 返回一个axios请求\r\n                    return axios({\r\n                            // 传入请求地址\r\n                            url: api.url,\r\n                            // 设置请求方式\r\n                            method: 'put',\r\n                            // 设置body携带参数\r\n                            params: {},\r\n                            // 设置body携带参数\r\n                            data: request,\r\n                            // 设置请求头\r\n                            headers: {\r\n                                'Content-Type': 'application/json;charset=utf-8'\r\n                            },\r\n                        })\r\n                        .then(function (response) {\r\n                            // 请求成功清除定时器\r\n                            clearTimeout(timeOut);\r\n                            // 执行resolve\r\n                            resolve(response.data);\r\n                        })\r\n                        .catch(function (error) {\r\n                            // 执行reject\r\n                            reject(error);\r\n                            // 控制台打印错误信息\r\n                            console.error('error：', error);\r\n                        });\r\n                } else\r\n                    // delete请求\r\n                    if (api.type === \"delete\") {\r\n                        // 返回一个axios请求\r\n                        return axios({\r\n                                // 传入请求地址\r\n                                url: api.url,\r\n                                // 设置请求方式\r\n                                method: 'delete',\r\n                                // 设置url携带参数\r\n                                params: {\r\n                                    ...request\r\n                                },\r\n                                // 设置请求头\r\n                                headers: {\r\n                                    'Content-Type': 'application/json;charset=utf-8'\r\n                                },\r\n                            })\r\n                            .then(function (response) {\r\n                                // 请求成功清除定时器\r\n                                clearTimeout(timeOut);\r\n                                // 执行resolve\r\n                                resolve(response.data);\r\n                            })\r\n                            .catch(function (error) {\r\n                                // 执行reject\r\n                                reject(error);\r\n                                // 控制台打印错误信息\r\n                                console.error('error：', error);\r\n                            });\r\n                    }\r\n    })\r\n}\r\nexport default server;\r\n\r\n\r\n\r\nconst crypto = require('crypto');\r\n \r\nexport function aesEncrypt(data, key) {\r\n    const cipher = crypto.createCipher('aes192', key);\r\n    var crypted = cipher.update(data, 'utf8', 'hex');\r\n    crypted += cipher.final('hex');\r\n    return crypted;\r\n}\r\n //解密\r\nexport function aesDecrypt(encrypted, key) {\r\n    const decipher = crypto.createDecipher('aes192', key);\r\n    var decrypted = decipher.update(encrypted, 'hex', 'utf8');\r\n    decrypted += decipher.final('utf8');\r\n    return decrypted;\r\n}\r\n","\n\n//区分身份证位数及验证\nfunction isTrueValidateCodeBy18IdCard(a_idCard) {\n    var sum = 0; // 声明加权求和变量\n    var Wi = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2, 1]; // 加权因子;\n    var ValideCode = [1, 0, 10, 9, 8, 7, 6, 5, 4, 3, 2]; // 身份证验证位值，10代表X;\n    if (a_idCard[17] == \"X\") {\n        a_idCard[17] = 10; // 将最后位为x的验证码替换为10方便后续操作\n    }\n    for (var i = 0; i < 17; i++) {\n        sum += Wi[i] * a_idCard[i]; // 加权求和\n    }\n    var valCodePosition = sum % 11; // 得到验证码所位置\n    if (a_idCard[17] == ValideCode[valCodePosition]) {\n        return true;\n    }\n    return false;\n}\n\nfunction isValidityBrithBy18IdCard(idCard18) {\n    var year = idCard18.substring(6, 10);\n    var month = idCard18.substring(10, 12);\n    var day = idCard18.substring(12, 14);\n    var temp_date = new Date(year, parseFloat(month) - 1, parseFloat(day));\n    // 这里用getFullYear()获取年份，避免千年虫问题\n    if (\n        temp_date.getFullYear() != parseFloat(year) ||\n        temp_date.getMonth() != parseFloat(month) - 1 ||\n        temp_date.getDate() != parseFloat(day)\n    ) {\n        return false;\n    }\n    return true;\n}\n\nfunction isValidityBrithBy15IdCard(idCard15) {\n    var year = idCard15.substring(6, 8);\n    var month = idCard15.substring(8, 10);\n    var day = idCard15.substring(10, 12);\n    var temp_date = new Date(year, parseFloat(month) - 1, parseFloat(day));\n    // 对于老身份证中的你年龄则不需考虑千年虫问题而使用getYear()方法\n    if (\n        temp_date.getYear() != parseFloat(year) ||\n        temp_date.getMonth() != parseFloat(month) - 1 ||\n        temp_date.getDate() != parseFloat(day)\n    ) {\n        return false;\n    }\n    return true;\n}\n/**\n *  正则校验证件类型\n * n: 证件类型\n * value: 证件数值\n * callback: 回调函数\n * errors:错误提示\n */\nexport function getCardType(n, value, callback, errors) {\n    switch (n) {\n        case \"10\":\n            var ret = false;\n            if (value.length == 15) {\n                ret = isValidityBrithBy15IdCard(value);\n            } else if (value.length == 18) {\n                var a_idCard = value.split(\"\"); // 得到身份证数组\n                if (\n                    isValidityBrithBy18IdCard(value) &&\n                    isTrueValidateCodeBy18IdCard(a_idCard)\n                ) {\n                    ret = true;\n                }\n            }\n            if (ret == false) {\n                errors.push(\"请填写正确的身份证！\");\n            }\n            break;\n        case \"11\":\n            var rel11 = /^[0-9a-zA-Z]{4,15}$/;\n            if (rel11.test(value) == false) {\n                errors.push(\"请填写正确的军官证！\");\n            }\n            break;\n        case \"12\":\n            var rel12 = /^[0-9a-zA-Z]{4,15}$/;\n            if (rel12.test(value) == false) {\n                errors.push(\"请填写正确的士兵证！\");\n            }\n            break;\n        case \"13\":\n            var rel13 = /^[0-9a-zA-Z]{8,9}$/;\n            if (rel13.test(value) == false) {\n                errors.push(\"请填写正确的警官证！\");\n            }\n            break;\n        case '14':\n            var rel14 = /^[HMhm]{1}([0-9]{10}|[0-9]{8})$/;\n            if (rel14.test(value) == false) {\n                errors.push(\"请填写正确的港澳居民来往内地通行证！\");\n            }\n            break;\n        case \"15\":\n            var rel15 = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\n            if (rel15.test(value) == false) {\n                errors.push(\"请填写正确的台湾居民来往大陆通行证！\");\n            }\n            break;\n        case '16':\n            var rel16 = /^((\\s?[A-Za-z])|([A-Za-z]{2}))\\d{6}((\\([0−9aA]\\))|(\\([0-9aA]\\)))$/;\n            if (rel16.test(value) == false) {\n                errors.push(\"请填写正确的香港身份证！\");\n            }\n            break;\n        case \"17\":\n            var rel17 = /^[1|5|7][0-9]{6}\\([0-9Aa]\\)$/;\n            if (rel17.test(value) == false) {\n                errors.push(\"请填写正确的澳门身份证！\");\n            }\n            break;\n        case \"18\":\n            var rel18 = /^[A-KM-QT-XZ]{1}[0-9]{9}$/;\n            if (rel18.test(value) == false) {\n                errors.push(\"请填写正确的台湾身份证！\");\n            }\n            break;\n        case \"19\":\n            var rel19 = /^[0-9a-zA-Z]{4,20}$/;\n            if (rel19.test(value) == false) {\n                errors.push(\"请填写正确的退伍证！\");\n            }\n            break;\n        case \"20\":\n            var rel20 = /^[0-9a-zA-Z]{4,20}$/;\n            if (rel20.test(value) == false) {\n                errors.push(\"请填写正确的护照！\");\n            }\n            break;\n        case \"21\":\n            var rel21 = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\n            if (rel21.test(value) == false) {\n                errors.push(\"请填写正确的驾照！\");\n            }\n            break;\n        case \"90\":\n            var rel90 = /^[0-9a-zA-Z]{4,20}$/;\n            if (rel90.test(value) == false) {\n                errors.push(\"请填写正确的证件号码！\");\n            }\n            break;\n    }\n    if (errors.length) {\n        callback(errors);\n    }\n}\n\n/**\n * 获取链接上参数值\n * name ：链接上相关的参数名\n */\nexport function getParams(name) {\n    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\n    var r = window.location.search.substr(1).match(reg)\n    if (r != null) return unescape(r[2])\n    return null\n}\n\n// 验证手机号\nexport function isPhone(rule, value, callback) {\n    let reg = /^1[34578]\\d{9}$/;\n      if (!value) {\n        callback(new Error(\"请输入手机号\"));\n      } else if (!reg.test(value)) {\n        callback(new Error(\"请输入正确的手机号\"));\n      } else {\n        callback();\n      }\n}\n//有效数字\nexport function isNum (rule, value, callback) {\n    const age= /^[0-9]*$/\n    if (!age.test(value)) {\n      callback(new Error('请输入有效数字'))\n    }else{\n      callback()\n    }\n  }\n\n\n// 验证固定电话\nexport function isTelPhone(value) {\n    var reg = /^([0-9]{3,4}-)?[0-9]{7,8}$/\n    if (reg.test(value)) {\n        return true\n    } else {\n        return false\n    }\n}\n\n// 验证统一社会信用代码\nexport function isCreditCode(credNum) {\n    let ret = false;\n    if (credNum.length === 18) {\n        var reg = /^([0-9ABCDEFGHJKLMNPQRTUWXY]{2})([0-9]{6})([0-9A-Z]{8})([0-9|X]{1})([0-9ABCDEFGHJKLMNPQRTUWXY]{1})$/;\n        if (reg.test(credNum)) {\n            var str = '0123456789ABCDEFGHJKLMNPQRTUWXY'\n            var ws = [1, 3, 9, 27, 19, 26, 16, 17, 20, 29, 25, 13, 8, 24, 10, 30, 28]\n            let sum = 0\n            for (let i = 0; i < 17; i++) {\n                sum += str.indexOf(credNum.charAt(i)) * ws[i]\n            }\n            let c18 = 31 - (sum % 31)\n            if (c18 === 31) {\n                c18 = '0'\n            }\n\n            if (str.charAt(c18) === credNum.charAt(17)) {\n                ret = true\n            }\n        }\n    }\n    return ret;\n}\n\n\n\n\n/**\n * @description 保存cookie\n * @param {Object} json 需要存储cookie的对象\n * @param {Number} days 默认存储多少天\n */\nfunction setCookie(json, days) {\n    // 设置过期时间\n    let data = new Date(\n        new Date().getTime() + days * 24 * 60 * 60 * 1000\n    ).toUTCString();\n\n    for (var key in json) {\n        document.cookie = key + \"=\" + json[key] + \"; expires=\" + data;\n    }\n}\n\n/** \n * @description 获取cookie\n * @param {String} name 需要获取cookie的key\n */\nfunction getCookie(name) {\n    var arr = document.cookie.match(new RegExp(\"(^| )\" + name + \"=([^;]*)(;|$)\"));\n    if (arr != null) {\n        return unescape(arr[2])\n    } else {\n        return null\n    }\n}\n\n/** \n * @description 删除cookie\n * @param {String} name 需要删除cookie的key\n */\nfunction clearCookie(name) {\n    let json = {};\n    json[name] = '';\n    setCookie(json, -1)\n}\n\nexport default {\n    setCookie,\n    getCookie,\n    clearCookie\n}"],"sourceRoot":""}